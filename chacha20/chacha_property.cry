module chacha_property where

import chacha_openssl
import chacha_rfc



//property1
ChaChaCorrect : {n}(fin n) => [n][8] -> [8][32] -> [4][32] -> Bit
property ChaChaCorrect inp key counter = (ChaCha20_ctr32 (ChaCha20_ctr32 inp key counter) key counter) == inp 
// :prove ChaChaCorrect : [64][8] -> [8][32] -> [4][32] -> Bit


//property2
ChaChaDiffInp : {n}(fin n) => [n][8] -> [n][8] -> [8][32] -> [4][32] -> Bit
property ChaChaDiffInp  inp1 inp2 key counter = if (ChaCha20_ctr32  inp1  key counter) !=  (ChaCha20_ctr32 inp2  key counter)
                                                then inp1 != inp2
                                                else True
//:prove ChaChaDiffInp : [64][8] -> [64][8] -> [8][32] -> [4][32] -> Bit

//property2
ChaChaDiffKey : {n}(fin n) => [n][8] -> [8][32] -> [8][32] -> [4][32] -> Bit
property ChaChaDiffKey inp key1 key2 counter = if (ChaCha20_ctr32 inp key1 counter) !=  (ChaCha20_ctr32 inp key2 counter)
                                               then key1 != key2
                                               else True
//:prove ChaChaDiffKey : [64][8] -> [8][32] -> [8][32] -> [4][32] -> Bit


//property3
ChaChaimp : {n}(fin n) => [n][8] -> [n][8] -> [8][32] -> [8][32]-> [4][32] -> [4][32] -> Bit
property ChaChaimp inp1 inp2 key1 key2 counter1 counter2 = if (ChaCha20_ctr32 inp1 key1 counter1) !=  (ChaCha20_ctr32 inp2 key2 counter2)
                                                       then (counter1 != counter2 \/ key1 != key2 \/ inp1 != inp2)
                                                       else True
//:prove ChaChaimp : [64][8] -> [64][8] -> [8][32] -> [8][32] -> [4][32] -> [4][32] -> Bit


//property4
ChaChaDiffCounter : {n}(fin n) => [n][8] -> [8][32] -> [4][32] -> [4][32] -> Bit
property ChaChaDiffCounter inp key counter1 counter2 = if counter1 != counter2
                                                       then (ChaCha20_ctr32 inp key counter1) !=  (ChaCha20_ctr32 inp key counter2)
                                                       else True
//:prove ChaChaDiffCounter : [64][8] -> [8][32] -> [4][32] -> [4][32] -> Bit


// ChaCha20Decrypt : [256][8] -> [8][32] -> [4][32] -> Bit
// property ChaCha20Decrypt inp key nonce = ChaCha20_ctr32 inp key nonce == tout
// //:sat ChaCha20Decrypt : [128][8] -> [8][32] -> [4][32] -> Bit

